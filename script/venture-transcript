#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2015 MIT Probabilistic Computing Project.
#
# This file is part of Venture.
#
# Venture is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Venture is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Venture.  If not, see <http://www.gnu.org/licenses/>.

# Process a markdown file with inline Venture snippets to produce a
# transcript document.

import sys
import re
import os.path
from StringIO import StringIO

try:
    import markdown2
except ImportError:
    sys.stderr.write('Please make sure you have markdown2 installed.\n')
    sys.exit(1)

import venture.shortcuts as vs
from venture.ripl.utils import strip_types

start_of_block = re.compile(r"^[ \t\r\f\v]*```venture[ \t\r\f\v]*$", re.MULTILINE)
end_of_block = re.compile(r"^[ \t\r\f\v]*```[ \t\r\f\v]*$", re.MULTILINE)

header = """\
<!DOCTYPE html>
<html lang="en">
<head>
  <title>A Venture transcript</title>
</head>
<body>
"""

footer = """\
</body>
</html>
"""
def main():
    (_, filename, outdir) = sys.argv
    print filename, outdir
    if not os.path.exists(outdir):
        os.makedirs(outdir)
    content = open(filename).read()
    Writer(filename, outdir).in_text(content)

def with_output_to_string(f, *args, **kwargs):
    old_stdout = sys.stdout
    result = StringIO()
    sys.stdout = result
    val = f(*args, **kwargs)
    sys.stdout = old_stdout
    ans = result.getvalue()
    return (val, ans)

def getValue(v):
  return strip_types(v['value'])

class Writer(object):
    def __init__(self, filename, outdir):
        basename = os.path.splitext(os.path.basename(filename))[0]
        self.outdir = outdir
        self.outfile = outdir + "/" + basename + ".html"
        self.out_chunks = []
        self.ripl = vs.backend("lite").make_combined_ripl()
        self.ripl.set_mode("venture_script")

    def in_text(self, string):
        split_res = re.split(start_of_block, string, maxsplit=1)
        if len(split_res) == 1:
            # File ended in text block
            self.emit_text(split_res[0])
            self.finish()
        elif len(split_res) == 2:
            # New Venture block started
            self.emit_text(split_res[0])
            self.in_code(split_res[1])
        else:
            raise Exception("??? Splitting on start of block produced %s" % (split_res,))

    def in_code(self, string):
        split_res = re.split(end_of_block, string, maxsplit=1)
        if len(split_res) == 1:
            # File ended in code block
            sys.stderr.write('Transcript file ended mid-code-block.\n')
            self.emit_code(split_res[0])
            self.finish()
        elif len(split_res) == 2:
            # New text block started
            self.emit_code(split_res[0])
            self.in_text(split_res[1])
        else:
            raise Exception("??? Splitting on end of block produced %s" % (split_res,))

    def emit_text(self, string):
        self.out_chunks.append(string)

    def emit_code(self, string):
        print "Trying program"
        print string
        (ans, output) = with_output_to_string(self.ripl.execute_program, string)
        print getValue(ans[-1])
        self.out_chunks.extend(["```", string, "```\n", output])

    def finish(self):
        result = ''.join(self.out_chunks)
        with open(self.outfile, 'w') as out:
            out.write(header)
            out.write(markdown2.markdown(result))
            out.write(footer)

if __name__ == "__main__":
    main()
