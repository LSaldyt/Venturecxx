#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2015, 2016 MIT Probabilistic Computing Project.
#
# This file is part of Venture.
#
# Venture is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Venture is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Venture.  If not, see <http://www.gnu.org/licenses/>.

# Process a markdown file with inline Venture snippets to produce a
# transcript document.

import sys
import re
import os.path
from StringIO import StringIO
import shutil
import cgi

try:
    import markdown2
except ImportError:
    sys.stderr.write('Please make sure you have markdown2 installed.\n')
    sys.exit(1)

import venture.shortcuts as vs
from venture.ripl.utils import strip_types
from venture.exception import VentureException

start_of_block = re.compile(r"^[ \t\r\f\v]*```(venture|church'|python)(/error)?[ \t\r\f\v]*$", re.MULTILINE)
end_of_block = re.compile(r"^[ \t\r\f\v]*```[ \t\r\f\v]*$", re.MULTILINE)

def header(title=None):
    if title is None:
        title = "A VentureScript transcript"
    return """\
<!DOCTYPE html>
<html lang="en">
<head>
  <title>%s</title>
  <link rel="stylesheet" type="text/css" href="transcript.css">
</head>
<body>
""" % (title,)

footer = """\
</body>
</html>
"""

selfdir = os.path.dirname(os.path.abspath(__file__))
css_file = os.path.join(selfdir, 'transcript.css')

def main():
    if len(sys.argv) == 3:
        (_, filename, outdir) = sys.argv
        title = "A VentureScript transcript"
    else:
        (_, filename, outdir, title) = sys.argv
    if not os.path.exists(outdir):
        os.makedirs(outdir)
    content = open(filename).read()
    try_title = re.match(r'\ATitle: (.*)\n((.|\n)*)\Z', content, re.MULTILINE)
    if try_title is not None:
        unexpected_errors = Writer(filename, outdir, try_title.group(1)).in_text(try_title.group(2))
        exit(unexpected_errors)
    else:
        unexpected_errors = Writer(filename, outdir, title).in_text(content)
        exit(unexpected_errors)

def with_output_to_string(f, *args, **kwargs):
    old_stdout = sys.stdout
    result = StringIO()
    sys.stdout = result
    retval = f(*args, **kwargs)
    sys.stdout = old_stdout
    captured_from_stdout = result.getvalue()
    return (retval, captured_from_stdout)

def getValue(v):
    if v is not None and 'value' in v:
        return strip_types(v['value'])
    else:
        return ""

class Writer(object):
    def __init__(self, filename, outdir, title=None):
        self.outdir = outdir
        self.outfile = outdir + "/index.html"
        self.out_chunks = []
        self._create_ripl()
        self.fignum = 0
        self.title = title
        self.unexpected_errors = 0

    def _create_ripl(self):
        self.ripl = vs.backend("lite").make_combined_ripl()
        self.ripl.set_mode("venture_script")

    def in_text(self, string):
        split_res = re.split(start_of_block, string, maxsplit=1)
        if len(split_res) == 1:
            # File ended in text block
            self.emit_text(split_res[0])
            return self.finish()
        elif len(split_res) == 4:
            # New Venture block started
            self.emit_text(split_res[0])
            return self.in_code(split_res[1], split_res[2] == "/error", split_res[3])
        else:
            raise Exception("??? Splitting on start of block produced %s" % (split_res,))

    def in_code(self, mode, expect_error, string):
        split_res = re.split(end_of_block, string, maxsplit=1)
        if len(split_res) == 1:
            # File ended in code block
            sys.stderr.write('Transcript file ended mid-code-block.\n')
            self.emit_code(mode, expect_error, split_res[0])
            return self.finish()
        elif len(split_res) == 2:
            # New text block started
            self.emit_code(mode, expect_error, split_res[0])
            return self.in_text(split_res[1])
        else:
            raise Exception("??? Splitting on end of block produced %s" % (split_res,))

    def emit_text(self, string):
        self.out_chunks.append(string)

    def emit_code(self, mode, expect_error, string):
        print "Trying program in %s mode" % (mode,)
        if mode == "venture":
            self.ripl.set_mode("venture_script")
            comment_start = '//'
        elif mode == "church'":
            self.ripl.set_mode("church_prime")
            comment_start = ';'
        elif mode == "python":
            # Python blocks are for hidden sneaks; if you want to show
            # Python use pyexec in Venture.
            exec(string)
            return
        else:
            raise Exception("Unknown block mode %s", mode)
        (figures, munged) = self.munge_plotfs(mode, string)
        print munged.strip()
        (returned, printed) = with_output_to_string(self.execute_program, munged, expect_error)
        val = getValue(returned[-1])
        indent = self.detect_indent(string)
        self.out_chunks.extend([indent, "```", string, indent, "```\n"])
        if len(printed.strip()) > 0:
            self.out_chunks.extend([indent, '<pre class="stdout"><code>', cgi.escape(printed), "</code></pre>\n"])
        self.out_chunks.extend([indent, '<pre class="value"><code>', cgi.escape(str(val)), "</code></pre>\n"])
        figure_blocks = [indent + "![A Venture plot](%s)\n" % (figure,) for figure in figures]
        self.out_chunks.extend(figure_blocks)

    def munge_plotfs(self, mode, string):
        # TODO Instead of munging the source, should also be able to
        # intercept all outgoing plots by rebinding plotf to a thing
        # that calls back to the Writer to determine and update the
        # figure number, and then does plotf_to_file.  [Taylor's
        # recommendation].
        figures = []
        ans = string
        done = False
        if mode == "venture":
            pattern = re.compile(r"plot(f?)\(")
        else:
            pattern = re.compile(r"\(plot(f?) ")
        while not done:
            if mode == "venture":
                replacement = 'plot\\1_to_file("%s/figure-%s", ' % (self.outdir, self.fignum)
            else:
                replacement = '(plot\\1_to_file "%s/figure-%s" ' % (self.outdir, self.fignum)
            (ans, count) = re.subn(pattern, replacement, ans, count=1)
            if count == 0:
                done = True
            else:
                figures.append("figure-%s.png" % (self.fignum,))
                self.fignum += 1
        return (figures, ans)

    def execute_program(self, munged, expect_error):
        if munged.strip() == "list_directives":
            return [self.ripl.print_directives()]
        elif munged.strip().startswith("clear"):
            cleared = [self._create_ripl()]
            prog = munged.strip()[len("clear"):]
            rest = self.execute_program(prog, expect_error)
            return cleared + rest
        else:
            try:
                return self.ripl.execute_program(munged)
            except VentureException as e:
                print e
                if not expect_error:
                    sys.stderr.write("Inserting unexpected exception into output:\n")
                    sys.stderr.write(str(e))
                    sys.stderr.write("\n")
                    import traceback
                    print >>sys.stderr, traceback.format_exc()
                    sys.stderr.flush()
                    self.unexpected_errors += 1
                return [None]

    def detect_indent(self, string):
        indents = []
        for line in string.split('\n'):
            if line:
                indent = line[:len(line)-len(line.lstrip())]
                indents.append(indent)
        s1 = min(indents)
        s2 = max(indents)
        for i, c in enumerate(s1):
            if c != s2[i]:
                return s1[:i]
        return s1

    def finish(self):
        result = ''.join(self.out_chunks)
        marked_down = markdown2.markdown(result, extras=['fenced-code-blocks', 'markdown-in-html', 'toc'])
        with open(self.outfile, 'w') as out:
            out.write(header(self.title))
            out.write(re.sub(r"<p>\[%TOC%\]</p>", "<h1>Contents</h1>\n" + marked_down.toc_html, marked_down))
            out.write(footer)
        shutil.copy(css_file, self.outdir)
        return self.unexpected_errors

if __name__ == "__main__":
    main()
