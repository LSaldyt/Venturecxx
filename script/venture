#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2013, MIT Probabilistic Computing Project.
#
# This file is part of Venture.
#
# Venture is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Venture is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with Venture.  If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
from venture.ripl.console import run_venture_console
import venture.shortcuts as v

def banner(help=True):
    help_ad = "  `help' for help"
    if not(help):
        help_ad = ""
    print '''
Venture, version 0.2.1  http://probcomp.csail.mit.edu/venture/{0}
Venture is *alpha quality* software.
Expect occasional crashes that wipe out your Venture session.
'''.format(help_ad).strip()

def server(args):
    banner(False)
    server = v.backend(args.backend).make_ripl_rest_server()
    print "Launching RIPL Server"
    server.run(host='0.0.0.0', port=args.port, debug=True, use_reloader=False)

def client(args):
    banner()
    url = "http://{0}:{1}".format(args.host, args.port)
    print "Connecting to RIPL Server at {0}".format(url)
    run_venture_console(v.make_ripl_rest_client(url))

def puma(args):
    banner()
    run_venture_console(local_ripl(args, v.Puma()))

def cxx(args):
    banner()
    run_venture_console(local_ripl(args, v.CXX()))

def lite(args):
    banner()
    run_venture_console(local_ripl(args, v.Lite()))

def local_ripl(args, backend):
    r = backend.make_church_prime_ripl()
    if (len(sys.argv) > 1) and args.prelude: r.load_prelude()
    return r

def add_prelude(parser_local):
    parser_local.add_argument('--prelude', action='store_true',
                              help = 'Load prelude on startup. Applies only to local sessions.')
    return parser_local

parser = argparse.ArgumentParser(description='An interactive, Turing-complete probabilistic programming platform')
parser.add_argument('--version', action='version', version='Venture, version 0.2.1')
subparsers = parser.add_subparsers(title="optional mode")

parser_local = subparsers.add_parser("puma", help="[default] Start a local Venture Puma session",
                                     description="Start a local Venture Puma session")
parser_local.set_defaults(func=puma)
parsers_local = add_prelude(parser_local)

parser_local = subparsers.add_parser("cxx", help="Start a local Venture CXX session",
                                     description="Start a local Venture CXX session")
parser_local.set_defaults(func=cxx)
parsers_local = add_prelude(parser_local)

parser_local = subparsers.add_parser("lite", help="Start a local Venture Lite session",
                                     description="Start a local Venture Lite session")
parser_local.set_defaults(func=lite)
parser_local = add_prelude(parser_local)

default_port = 8082

parser_server = subparsers.add_parser("server", help="Start a Venture server session",
                                      description="Start a Venture server session")
parser_server.add_argument("backend", default="lite", help="the Venture backend use")
parser_server.add_argument("-p", "--port", type=int, default=default_port,
                           help="the port to listen on (default {0})".format(default_port))
parser_server.set_defaults(func=server)

default_host = '127.0.0.1'

parser_client = subparsers.add_parser("remote", help="Connect to a running Venture server session",
                                      description="Connect to a running Venture server session")
parser_client.add_argument("--host", default=default_host,
                           help="the host to connect to (default {0})".format(default_host))
parser_client.add_argument("-p", "--port", type=int, default=default_port,
                           help="the port to connect on (default {0})".format(default_port))
parser_client.set_defaults(func=client)

if len(sys.argv) == 1:
    # Work around what appears to be a limitation of argparse
    puma(None)
else:
    args = parser.parse_args()
    args.func(args)
