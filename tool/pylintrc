# For lack of a better place, rationales are collected below.

[MESSAGES CONTROL]
# Disabled messages:
# C0103: Name violates convention
# C0111: Missing docstring
# C0321: More than one statement on a single line
# C0324: Comma not followed by a space
# R0201: Method could be a function
# R0903: Too few public methods
# R0904: Too many public methods
# W0142: Used * or ** magic
# W0511 (warning notes in code comments)
# W1201: Specify string format arguments as logging function parameters
# W0201: Attribute defined outside init
# W0622: Redefined builtin

# Messages disabled pending normalization of our codebase:
# E0611: No name in module
# E1101: No member
# C0301: Line too long
# C0302: Too many lines in module
# C0303: Trailing whitespace
# W0311: Bad indentation
# W0403: Relative import
# R0902: Too many instance methods
# R0911: Too many return statements
# R0912: Too many branches
# R0913: Too many arguments
# R0914: Too many local variables
# R0915: Too many statements
# R0921: Abstract class not used
# R0922: Abstract class little used
disable=E0611,E1101,C0103,C0111,C0321,C0324,R0201,R0903,R0904,W0142,W0511,W1201,W0201,W0622,W0311,W0403,C0301,C0302,C0303,R0902,R0911,R0912,R0913,R0914,R0915,R0921,R0922

# Rationale: Suppressing no-member and no-name-in-module errors
#   Pylint does not understand metaprogramming.  Sadly, much of
#   visible interface of numpy and scipy appears to be metaprogrammed
#   (for instance, by structured re-import from submodules), so every
#   attempt to use those tools produces huge numbers of Pylint
#   problems.

# Rationale: Wildcard imports
#   Turns out wildcard imports in Python import every name visible in
#   the imported module, including ones it itself imported.  Import
#   chains like that are confusing disasters waiting to happen.

# Rationale: Permit defining attributes outside init
#   We just have too much code that relies upon being able to store
#   arbitrary stuff in an object.

# Rationale: Permit redefining builtin names
#   id especially is just too useful a name to surrender to the
#   useless builtin it names.

# Rationale: Suppressing design-nanny warnings
#   Yes, methods with too many arguments, local variables, and
#   branches are poor design; but that is something that should bother
#   people even without Pylint getting in their face about it; and
#   doing the refactorings to clean that up requires more taste than
#   can be produced under pressure.
#   TODO Perhaps turn C0302, R0902, R0911, R0912, R0913, R0914, R0915 back on
#   for the code-review-mode style check

[FORMAT]
indent-string='  '

[BASIC]
# List of builtins function names that should not be used, separated by a comma
# map and filter are suggested here, presumably in favor of list comprehensions
bad-functions=apply,input

# Regular expression which should only match correct function names
function-rgx=[a-z_][a-z0-9_]{0,30}$

# Regular expression which should only match correct method names
method-rgx=[a-z_][a-z0-9_]{0,30}$

# Regular expression which should only match correct instance attribute names
attr-rgx=[a-z_][a-z0-9_]{0,30}$

# Regular expression which should only match correct argument names
argument-rgx=[a-z_][a-z0-9_]{0,30}$

# Regular expression which should only match correct variable names
variable-rgx=[a-z_][a-z0-9_]{0,30}$

[VARIABLES]
# Regular expression which should match exactly the names that are OK
# to define but not use.  TODO Here I use the underscore convention from
# Haskell despite its conflict with the Python convention of treating
# underscored names as semi-private.
dummy-variables-rgx=_|dummy
