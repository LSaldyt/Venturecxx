// Copyright (c) 2015 MIT Probabilistic Computing Project.
//
// This file is part of Venture.
//
// Venture is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Venture is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Venture.  If not, see <http://www.gnu.org/licenses/>.

infer load_plugin("venstan.py");
assume stan_prog = "
data {
  real<lower=0> sigma;
  real y;
}
parameters {
  real mu;
}
model {
  increment_log_prob(normal_log(mu, 0, 1));
  increment_log_prob(normal_log(y, mu, sigma));
}
generated quantities {
  real y_out;
  y_out <- normal_rng(mu, sigma);
}";
assume inputs = quote("sigma"("Number")());
assume c_outputs = quote("y_out"("y", "Number")());
assume stan_sp = make_ven_stan(stan_prog, inputs, c_outputs);
assume is_outlier = flip();
assume variance = if (is_outlier) { 10 } else { 1 };

// With the given prior on mu, making this observation 8 should
// heavily favor the "outlier" result, whereas making it 0 should heavily
// favor the "not outlier" result.
observe stan_sp(variance) = 8;
define data = run(accumulate_dataset(20, do(
  reset_to_prior,
  mh(default, one, 20),
  collect(is_outlier))));
print(data)
