; Copyright (c) 2015 MIT Probabilistic Computing Project.
;
; This file is part of Venture.
;
; Venture is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; Venture is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with Venture.  If not, see <http:;www.gnu.org/licenses/>.

; Model program.
(assume kepler
  (lambda (apogee perigee)
    (let ((GM 398600.4418)
          (earth_radius 6378)
          (a (+ (* .5 (+ (abs apogee) (abs perigee))) earth_radius)))
      (/ (* 2 3.1415 (sqrt (/ (pow a 3) GM))) 60))))

(assume noise (gamma 15 .5))
(assume alpha (gamma 2 .5))

(assume sim_cluster (make_crp alpha))
(assume z (mem (lambda (i) (tag 'clusters i (sim_cluster)))))

(assume apogee_sampler (mem (lambda (i) (make_nig_normal 1.5e5 1e9 1 20))))
(assume perigee_sampler (mem (lambda (i) (make_nig_normal 2e4 1e9 1 20))))

(assume apogee
  (mem (lambda (i) (normal ((apogee_sampler (z i))) .1))))
(assume perigee
  (mem (lambda (i) (normal ((perigee_sampler (z i))) .1))))
(assume period
  (mem (lambda (i)
    (normal (kepler (apogee i) (perigee i)) noise))))

; Observation process.
[define observer
  (lambda (iapt)
      (let ((sat_id (lookup iapt 0))
            (sat_ap (lookup iapt 1))
            (sat_pg (lookup iapt 2))
            (sat_pr (lookup iapt 3)))
        (do
          (if (< 0 sat_ap)
            (observe (apogee (atom ,sat_id)) sat_ap)
            (return (print sat_id)))
          (if (< 0 sat_pg)
            (observe (perigee (atom ,sat_id)) sat_pg)
            (return (print sat_id)))
          (if (< 0 sat_pr)
            (observe (period (atom ,sat_id)) sat_pr)
            (return (print sat_id))))))]

(pyexec "import pandas as pd; import venture.value.dicts as vd")
(pyexec "from venture.lite.value import VentureValue as VV")
(pyexec "data = pd.read_csv('satellites.csv').itertuples()")

[define n_samples 1167]
[define observation
  (lambda (d) (run (pyeval "VV.fromStackDict(vd.vector(list(data.next())))")))]
(for_each (arange n_samples) (lambda (d) (observer (observation d))))

; Inference program.
[infer (mh 'default 'one 30000)]
[define assignments
  (run (mapM (lambda (i) (sample (z (atom ,i)))) (arange n_samples)))]
