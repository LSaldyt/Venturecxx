// compute p(y) = integral of p(x) p(y | x)
define marginal_density = (prior, likelihood, n_samples) -> {
  (y) -> {
    estimates <- for_each(arange(n_samples), (i) -> {
      x <~ invoke_metaprogram_of_sp(prior, 'simulate', []);
      logp <- invoke_metaprogram_of_sp(likelihood, 'log_density', [y, x]);
      return (logp)
    });
    return (logsumexp(estimates) - log(n_samples))
  }
};

// p(x|y) = p(x) p(y|x) / p(y)
define bayes_rule = (prior, likelihood, y, n_samples) -> {
  (x) -> {
    logp_x <- invoke_metaprogram_of_sp(prior, 'log_density', [x]);
    logp_y_given_x <- invoke_metaprogram_of_sp(likelihood, 'log_density', [y, x]);
    logp_y <- marginal_density(prior, likelihood, n_samples)(y);
    return (logp_x + logp_y_given_x - logp_y)
  }
};

// work around the fact that it only works in a child trace...
define actually_run_bayes_rule = (prior, likelihood, y, n_samples) -> {
  (x) -> {
    run_in({
      assume prior = ${prior};
      assume likelihood = ${likelihood};
      prior <- value_at(toplevel(1));
      likelihood <- value_at(toplevel(2));
      bayes_rule(prior, likelihood, y, n_samples)(x)
    }, flat_trace())
  }
};

// example on normal-normal model

define simulate_std_normal = () ~> {
  u1 = uniform_continuous(0, 1);
  u2 = uniform_continuous(0, 1);
  sqrt(-2 * log(u1)) * cos(2 * 3.14159265 * u2)
};

define assess_std_normal = (x) -> {
  -0.5 * log(2 * 3.14159265) - 0.5 * x * x
};

define std_normal = make_elementary_sp([| () -> {
  let simulate_std_normal = ${simulate_std_normal};
  let assess_std_normal = ${assess_std_normal};
  dict(
    ['state', nil],
    ['simulate', () -> {
      return (simulate_std_normal())
    }],
    ['log_density', (x) -> {
      return (assess_std_normal(x))
    }])
} |]);

define unit_normal = make_elementary_sp([| () -> {
  let simulate_std_normal = ${simulate_std_normal};
  let assess_std_normal = ${assess_std_normal};
  dict(
    ['state', nil],
    ['simulate', (mean) -> {
      return (mean + simulate_std_normal())
    }],
    ['log_density', (x, mean) -> {
      return (assess_std_normal(x - mean))
    }])
} |]);

define normal_normal_posterior_density = actually_run_bayes_rule(std_normal, unit_normal, 4.0, n_samples: 500);
