// This is theoretically from
// Marsaglia, Tsang, "A simple method for generating gamma variables"
// Transactions on Mathematical Software 26(3), 2000, pp 363-372.

define simulate_std_gamma = (alpha) ~> {
  d = alpha - (1.0/3);
  c = 1.0 / sqrt(9 * d);
  x ~ normal(0, 1);
  v = pow(1 + c * x, 3);
  if (v <= 0) {
    simulate_std_gamma(alpha)
  } else {
    log_bound = 0.5 * x * x + d * (1 - v + log(v));
    u ~ uniform_continuous(0, 1);
    if (log(u) >= log_bound) {
      simulate_std_gamma(alpha)
    } else {
      d * v
    }
  }
};

// Former caption: A sampler for the gamma distribution using an explicit
// rejection loop.


define assess_std_gamma = (x, alpha) -> {
  (alpha - 1) * log(x) - x - log_gamma_function(alpha)
};

// encapsulated as an SP:
define std_gamma = make_elementary_sp(() -> {
  let simulate_std_gamma = ${simulate_std_gamma};
  let assess_std_gamma = ${assess_std_gamma};
  dict(
    ['simulate', (alpha) -> {
      return (simulate_std_gamma(alpha))
    }],
    ['log_density', (x, alpha) -> {
      return (assess_std_gamma(alpha))
    }])
});
