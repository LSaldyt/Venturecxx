define example_resimulation = (steps) ~> {
  run_in({
    assume x ~ normal(0, 1);
    assume y ~ normal(x, 1);
    observe y = 4.0;
    incorporate_constraint(toplevel(2), 4.0);
    repeat(steps, {
      subproblem <- single_site_subproblem(toplevel(1));
      resimulation_step(subproblem)
    });
    predict x
  }, flat_trace())
};

define traceplot = (steps) ~> {
  run_in({
    assume x ~ normal(0, 1);
    assume y ~ normal(x, 1);
    observe y = 4.0;
    incorporate_constraint(toplevel(2), 4.0);
    accumulate(steps, toplevel(1), {
      subproblem <- single_site_subproblem(toplevel(1));
      resimulation_step(subproblem)
    })
  }, flat_trace())
};

define resimulation_step = (subproblem) -> {
  package <- extract(subproblem);
  let (old_weight, old_trace_fragment) = package;
  new_weight <- regen(subproblem, old_trace_fragment);
  consistent <- check_consistent();
  if (consistent && log_flip(new_weight - old_weight)) {
    pass
  }
  else {
    extract(subproblem);
    restore(subproblem, old_trace_fragment)
  }
};

// stubbed for now
define pass = return(nil);

define extract = {
  let old_extract = extract;
  (subproblem) -> {
    package <- old_extract(subproblem);
    return((first(package), rest(package)))
  }
};
