define example_drift = (steps) ~> {
  run_in({
    assume x ~ normal(0, 1);
    assume y ~ normal(x, 1);
    observe y = 4.0;
    incorporate_constraint(toplevel(2), 4.0);
    repeat(steps, {
      custom_drift_mh_step();
    });
    predict x
  }, flat_trace())
};

define traceplot = (steps) ~> {
  run_in({
    assume x ~ normal(0, 1);
    assume y ~ normal(x, 1);
    observe y = 4.0;
    incorporate_constraint(toplevel(2), 4.0);
    accumulate(steps, toplevel(1), {
      custom_drift_mh_step();
    })
  }, flat_trace())
};

define custom_drift_mh_step = () -> {
  // read the current values of x and y from the trace
  x <- value_at(toplevel(1));
  y <- value_at(toplevel(2));

  // Gaussian drift proposal
  let x_proposed ~ normal(x, 0.5);

  // evaluate the density of the current trace
  term1 <- log_density_of_sp(normal, x, [0, 1]);
  term2 <- log_density_of_sp(normal, y, [x, 1]);
  let old_weight = term1 + term2;

  // evaluate the density of the proposed trace
  term3 <- log_density_of_sp(normal, x_proposed, [0, 1]);
  term4 <- log_density_of_sp(normal, y, [x_proposed, 1]);
  let new_weight = term3 + term4;

  // accept or reject
  if (log_flip(new_weight - old_weight)) {
    // accept
    set_value_at(toplevel(1), x_proposed);
  }
  else {
    // reject
    pass;
  }
};

// stubbed for now
define pass = return(nil);

define extract = {
  let old_extract = extract;
  (subproblem) -> {
    package <- old_extract(subproblem);
    return((first(package), rest(package)))
  }
};
