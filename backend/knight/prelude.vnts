define replicate = (n, f) ~> {
  if (n <= 0) { list() } else {
    pair(f(), replicate(n-1, f))
  }
};

define map = (f, l) -> {
  if (is_pair(l)) {
    pair(f(first(l)), map(f, rest(l)))
  } else {
    list()
  }
};

define trace_of = (sp, args) ~> {
  t1 = get_current_trace();
  t2 = get_current_trace();
  res = regenerate(sp, args, t1, t2);
  list(first(res), t2)
};

define subtrace_at = (trace, site) -> {
  if (is_pair(site)) {
    subtrace_at(subtrace(trace, first(site)), rest(site))
  } else {
    trace
  }
};
