define DATAGEN_template
# Generating data from a unary sample dumping procedure
# Arguments:
# - Name of generator type
# - Number of replicates
# - Initial seed
$1-$2-s$3.sav: example.vnts
	metaprob -s $3 -f ../prelude.vnts -f ../inference.vnts -f $$< \
	  -f ../coin-ex1/harness.vnts -e 'dump_$1_samples($2)' > $$@
endef

define DATAGEN2_template
# Generating data from a binary sample dumping procedure
# Arguments:
# - Name of generator type
# - Number of replicates
# - Number of steps or particles per replicate
# - Initial seed
$1-$2-$3-s$4.sav: example.vnts
	metaprob -s $4 -f ../prelude.vnts -f ../inference.vnts -f $$< \
	  -f ../coin-ex1/harness.vnts -e 'dump_$1_samples($2, $3)' > $$@
endef

define MERGE_template
# Merging data generated by (either) datagen
# Arguments:
# - Name of generator type
# - Aggregate replicates-steps string
# - Component replicates-steps string
# - Number of jobs to aggregate
# Expectation: The aggregate number of replicates is the component
# number of replicates, times the number of jobs aggregated.
$1-$2.sav: $(foreach seed,$(shell seq $4),$1-$3-s$(seed).sav)
	cat $$^ > $$@
endef

define PLOT_template
# Plotting data merged by merge
# Arguments:
# - Base name of plot/data file
# - Plot style
$1.png: $1.sav ../plotting.py
	python -c 'import matplotlib.pyplot as plt; \
	  import scipy.stats as stats; \
	  import venture.knight.plotting as p; \
	  p.plot_$2("$$<", analytic=stats.beta(7,2)); \
	  plt.savefig("$$@")'
endef

# Histogramming effectiveness of SIR, up to 200 20-particle runs
$(foreach seed,$(shell seq 100),$(eval $(call DATAGEN2_template,particle,10,20,$(seed))))
$(eval $(call MERGE_template,particle,200-20,10-20,20))
$(eval $(call PLOT_template,particle-200-20,particles))

# Histogramming effectiveness of single-site mh, up to 600 30-step chains
$(foreach seed,$(shell seq 100),$(eval $(call DATAGEN2_template,mcmc,10,30,$(seed))))
$(eval $(call MERGE_template,mcmc,40-30,10-30,4))
$(eval $(call PLOT_template,mcmc-40-30,mcmc))
$(eval $(call MERGE_template,mcmc,600-30,10-30,60))
$(eval $(call PLOT_template,mcmc-600-30,mcmc))

# Histogramming effectiveness of custom mh, up to 600 30-step chains
$(foreach seed,$(shell seq 100),$(eval $(call DATAGEN2_template,custom_mcmc,10,30,$(seed))))
$(eval $(call MERGE_template,custom_mcmc,40-30,10-30,4))
$(eval $(call PLOT_template,custom_mcmc-40-30,mcmc))
$(eval $(call MERGE_template,custom_mcmc,600-30,10-30,60))
$(eval $(call PLOT_template,custom_mcmc-600-30,mcmc))

# p-p plots
rejection-p-p-50.png: example.vnts
	metaprob -f ../prelude.vnts -f ../inference.vnts -f $< \
	  -f ../coin-ex1/harness.vnts -e 'rejection_p_p_plot(50, "$@")'

particles-p-p-10-2.png: example.vnts
	metaprob -f ../prelude.vnts -f ../inference.vnts -f $< \
	  -f ../coin-ex1/harness.vnts -e 'particles_p_p_plot(10, 2, "$@")'

particles-p-p-50-20.png: example.vnts
	metaprob -f ../prelude.vnts -f ../inference.vnts -f $< \
	  -f ../coin-ex1/harness.vnts -e 'particles_p_p_plot(50, 20, "$@")'

ssrmh-p-p-50-20.png: example.vnts
	metaprob -f ../prelude.vnts -f ../inference.vnts -f $< \
	  -f ../coin-ex1/harness.vnts -e 'ssrmh_p_p_plot(50, 20, "$@")'

custom-rmh-p-p-50-20.png: example.vnts
	metaprob -f ../prelude.vnts -f ../inference.vnts -f $< \
	  -f ../coin-ex1/harness.vnts -e 'custom_rmh_p_p_plot(50, 20, "$@")'

ss-vs-custom-rmh-p-p-50-3.png: example.vnts
	metaprob -f ../prelude.vnts -f ../inference.vnts -f $< \
	  -f ../coin-ex1/harness.vnts -e 'ss_vs_custom_rmh_p_p_plot(50, 3, "$@")'
