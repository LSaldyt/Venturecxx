define DATAGEN_template
# Generating data from a unary sample dumping procedure
# Arguments:
# - Name of generator type
# - Number of replicates
# - Initial seed
$1-$2-s$3.sav: example.vnts
	metaprob -s $3 -f ../prelude.vnts -f ../inference.vnts -f $$< \
	  -f ../coin-ex1/harness.vnts -e 'dump_$1_samples($2)' > $$@
endef

define DATAGEN2_template
# Generating data from a binary sample dumping procedure
# Arguments:
# - Name of generator type
# - Number of replicates
# - Number of steps or particles per replicate
# - Initial seed
$1-$2-$3-s$4.sav: example.vnts
	metaprob -s $4 -f ../prelude.vnts -f ../inference.vnts -f $$< \
	  -f ../coin-ex1/harness.vnts -e 'dump_$1_samples($2, $3)' > $$@
endef

define MERGE_template
# Merging data generated by (either) datagen
# Arguments:
# - Name of generator type
# - Aggregate replicates-steps string
# - Component replicates-steps string
# - Number of jobs to aggregate
# Expectation: The aggregate number of replicates is the component
# number of replicates, times the number of jobs aggregated.
$1-$2.sav: $(foreach seed,$(shell seq $4),$1-$3-s$(seed).sav)
	cat $$^ > $$@
endef

define PLOT_template
# Plotting data merged by merge
# Arguments:
# - Base name of plot/data file
# - Number of comparison rejection samples
# - Plot style
$1-$2.png: $1.sav rejection-$2.sav ../plotting.py
	python -c 'import matplotlib; matplotlib.use("Agg"); \
	  import matplotlib.pyplot as plt; \
	  import scipy.stats as stats; \
	  import venture.knight.plotting as p; \
	  p.plot_$3("$$<", "rejection-$2.sav"); \
	  plt.savefig("$$@")'
endef

$(foreach seed,$(shell seq 500),$(eval $(call DATAGEN_template,rejection,50,$(seed))))
$(eval $(call MERGE_template,rejection,1000,50,20))
$(eval $(call MERGE_template,rejection,10000,50,200))

$(foreach seed,$(shell seq 500),$(eval $(call DATAGEN2_template,particle,10,20,$(seed))))
$(eval $(call MERGE_template,particle,200-20,10-20,20))
$(eval $(call PLOT_template,particle-200-20,1000,particles))

$(foreach seed,$(shell seq 500),$(eval $(call DATAGEN2_template,particle,10,30,$(seed))))
$(eval $(call MERGE_template,particle,1500-30,10-30,150))
$(eval $(call PLOT_template,particle-1500-30,10000,particles))

mcmc-50-20.txt: example.vnts
	metaprob -f ../prelude.vnts -f ../inference.vnts -f $< \
	  -f ../coin-ex1/harness.vnts -e 'dump_mcmc_samples(50, 20)' > $@

mcmc-500-20.txt: example.vnts
	metaprob -f ../prelude.vnts -f ../inference.vnts -f $< \
	  -f ../coin-ex1/harness.vnts -e 'dump_mcmc_samples(500, 20)' > $@

mcmc-1500-30.txt: example.vnts
	metaprob -f ../prelude.vnts -f ../inference.vnts -f $< \
	  -f ../coin-ex1/harness.vnts -e 'dump_mcmc_samples(1500, 30)' > $@

mcmc-50-20-50.png: mcmc-50-20.txt rejection-50.txt ../plotting.py
	python -c 'import venture.knight.plotting as p; \
	  import matplotlib.pyplot as plt; \
	  p.plot_mcmc("$<", "rejection-50.txt"); \
	  plt.savefig("$@")'

mcmc-500-20-500.png: mcmc-500-20.txt rejection-500.txt ../plotting.py
	python -c 'import venture.knight.plotting as p; \
	  import matplotlib.pyplot as plt; \
	  p.plot_mcmc("$<", "rejection-500.txt"); \
	  plt.savefig("$@")'

mcmc-500-20-2000.png: mcmc-500-20.txt rejection-2000.txt ../plotting.py
	python -c 'import venture.knight.plotting as p; \
	  import matplotlib.pyplot as plt; \
	  p.plot_mcmc("$<", "rejection-2000.txt"); \
	  plt.savefig("$@")'

mcmc-1500-30-10000.png: mcmc-1500-30.txt rejection-10000.txt ../plotting.py
	python -c 'import venture.knight.plotting as p; \
	  import matplotlib.pyplot as plt; \
	  p.plot_mcmc("$<", "rejection-10000.txt"); \
	  plt.savefig("$@")'
